Index: fxproject/src/test/java/com/creatures/CreatureTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.creatures;\n\nimport com.condition_manager.*;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.stubbing.OngoingStubbing;\n\nimport java.io.File;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nclass CreatureTest {\n\n    final int FULL_HEALTH = 25;\n    final int MIN_DURATION = 1;\n\n    @BeforeEach\n    public void init(){\n        Creature creature = new AllyCreature(\"John Creature\", 25, 5, new File(\"./src/main/resources/com/cs422/fxproject/Default_Image.png\"));\n        Creature spyCreature = spy(creature);\n    }\n\n    private ConditionDao getCritConditions() {\n        ConditionDao critConditions = new ConditionDaoImpl();\n        Condition paralyzed = critConditions.createCondition(\"Paralyzed\", MIN_DURATION);\n        critConditions.addCurrentCondition(paralyzed);\n        Condition unconscious = critConditions.createCondition(\"Unconscious\", MIN_DURATION);\n        critConditions.addCurrentCondition(unconscious);\n        Condition incapacitated = critConditions.createCondition(\"Incapacitated\", MIN_DURATION);\n        critConditions.addCurrentCondition(incapacitated);\n        return critConditions;\n    }\n\n    @Test\n    void addHealth_to_full() {\n        int input = 15;\n        Creature creature = new AllyCreature(\"John Creature\", 25, 5, new File(\"./src/main/resources/com/cs422/fxproject/Default_Image.png\"));\n        creature.setCurrentHealth(20);\n        creature.addHealth(input);\n        assertEquals(FULL_HEALTH, creature.getCurrentHealth());\n    }\n\n    @Test\n    void addHealth_not_full() {\n        int input = 3;\n        int expected = 23;\n        Creature creature = new AllyCreature(\"John Creature\", 25, 5, new File(\"./src/main/resources/com/cs422/fxproject/Default_Image.png\"));\n        creature.setCurrentHealth(20);\n        creature.addHealth(input);\n        assertEquals(expected, creature.getCurrentHealth());\n    }\n\n    @Test\n    void removeHealth_with_auto_crits(){\n        int inputHealthPoints = 10;\n        boolean inputCrit = false;\n        int expected = 5;\n        Creature creature = new AllyCreature(\"John Creature\", 25, 5, new File(\"./src/main/resources/com/cs422/fxproject/Default_Image.png\"));\n        Creature spyCreature = spy(creature);\n        ConditionDao critConditions = getCritConditions();\n        Mockito.when(spyCreature.getCurrentConditions()).thenReturn(critConditions.getCurrentConditions());\n        spyCreature.removeHealth(inputHealthPoints, inputCrit);\n        assertEquals(expected, spyCreature.getCurrentHealth());\n    }\n\n    @Test\n    void removeHealth_with_more_bonus_health(){\n        int inputHealthPoints = 10;\n        boolean inputCrit = false;\n        int expectedHealth = 25;\n        int expectedBonusHealth = 5;\n        Creature creature = new AllyCreature(\"John Creature\", 25, 5, new File(\"./src/main/resources/com/cs422/fxproject/Default_Image.png\"));\n        creature.setBonusHealth(15);\n        creature.removeHealth(inputHealthPoints, inputCrit);\n        assertEquals(expectedHealth, creature.getCurrentHealth());\n        assertEquals(expectedBonusHealth, creature.getBonusHealth());\n    }\n\n    @Test\n    void removeHealth_kill(){\n        int inputHealthPoints = 30;\n        boolean inputCrit = true;\n        int expected = 0;\n        Creature creature = new AllyCreature(\"John Creature\", 25, 5, new File(\"./src/main/resources/com/cs422/fxproject/Default_Image.png\"));\n        creature.removeHealth(inputHealthPoints, inputCrit);\n        assertEquals(expected, creature.getCurrentHealth());\n        assertEquals(Unconscious.class, creature.getCurrentConditions().get(0).getClass());\n    }\n\n    @Test\n    void addBonusHealth() {\n        int input = 5;\n        int expected = 5;\n        Creature creature = new AllyCreature(\"John Creature\", 25, 5, new File(\"./src/main/resources/com/cs422/fxproject/Default_Image.png\"));\n        creature.addBonusHealth(input);\n        assertEquals(expected, creature.getBonusHealth());\n    }\n\n    @Test\n    void addBonusHealth_no_change() {\n        int input = 3;\n        int expected = 5;\n        Creature creature = new AllyCreature(\"John Creature\", 25, 5, new File(\"./src/main/resources/com/cs422/fxproject/Default_Image.png\"));\n        creature.setBonusHealth(5);\n        creature.addBonusHealth(input);\n        assertEquals(expected, creature.getBonusHealth());\n    }\n\n    @Test\n    void addCondition() {\n        String inputType = \"Charmed\";\n        Creature creature = new AllyCreature(\"John Creature\", 25, 5, new File(\"./src/main/resources/com/cs422/fxproject/Default_Image.png\"));\n        creature.addCondition(inputType, MIN_DURATION);\n        assertEquals(Charmed.class, creature.getCurrentConditions().get(0).getClass());\n    }\n\n    @Test\n    void removeCondition() {\n        // Create a test creature instance\n        Creature creature = new AllyCreature(\"John Creature\", 25, 5, new File(\"/path/to/image.png\"));\n\n        // Add a condition to the creature\n        String conditionType = \"Frightened\";\n        creature.addCondition(conditionType, 3); // Replace the duration with an appropriate value\n\n        // Get the initial count of conditions\n        int initialConditionsCount = creature.getCurrentConditions().size();\n\n        // Remove the condition\n        creature.removeCondition(creature.getCurrentConditions().get(0)); // Pass the condition to be removed\n\n        // Get the count of conditions after removal\n        int conditionsCountAfterRemoval = creature.getCurrentConditions().size();\n\n        // Verify that the count is decreased by 1 after the removal\n        assertEquals(initialConditionsCount - 1, conditionsCountAfterRemoval);\n    }\n\n    @Test\n    void decrementConditions() {\n        Creature creature = new AllyCreature(\"John Creature\", 25, 5, new File(\"/path/to/image.png\"));\n\n        // Add a few conditions to the creature\n        creature.addCondition(\"Frightened\", 3);\n        creature.addCondition(\"Poisoned\", 2);\n\n        // Capture the base durations\n        List<Integer> baseDurations = creature.getCurrentConditions().stream()\n                .map(Condition::getDuration)\n                .collect(Collectors.toList());\n\n        // Decrement the conditions\n        creature.decrementConditions();\n\n        // Get the updated conditions list\n        List<Condition> updatedConditions = creature.getCurrentConditions();\n\n        // Check the duration of each condition in the updated list\n        for (int i = 0; i < updatedConditions.size(); i++) {\n            Condition updatedCondition = updatedConditions.get(i);\n            Integer baseDuration = baseDurations.get(i);\n\n            // Compare the updated condition duration with the base condition - 1\n            assertEquals(baseDuration - 1, updatedCondition.getDuration());\n        }\n    }\n\n    @Test\n    void getName() {\n        String expectedName = \"John Creature\";\n        Creature creature = new AllyCreature(expectedName, 25, 5, new File(\"./path/to/image.png\"));\n\n        // Get the name from the creature object\n        String actualName = creature.getName();\n\n        // Verify if the retrieved name matches the expected name\n        assertEquals(expectedName, actualName);\n    }\n\n    @Test\n    void getImage() {\n        // Create a test file\n        File testImage = new File(\"/path/to/test_image.png\");\n\n        Creature creature = new AllyCreature(\"John Creature\", 25, 5, testImage);\n\n        // Retrieve the image file using the method\n        File retrievedImage = creature.getImage();\n\n        // Assert that the retrieved image matches the expected image\n        assertEquals(testImage, retrievedImage);\n    }\n\n    @Test\n    void getMaxHealth() {\n        int expectedMaxHealth = 25; // Change to your expected maximum health value\n        Creature creature = new AllyCreature(\"John Creature\", expectedMaxHealth, 5, new File(\"/path/to/image.png\"));\n\n        // Retrieve the maximum health using the method\n        int actualMaxHealth = creature.getMaxHealth();\n\n        // Validate the retrieved maximum health\n        assertEquals(expectedMaxHealth, actualMaxHealth);\n    }\n\n    @Test\n    void getCurrentHealth() {\n        int expectedCurrentHealth = 20; // Change to your expected current health value\n        Creature creature = new AllyCreature(\"John Creature\", 25, 5, new File(\"/path/to/image.png\"));\n        creature.setCurrentHealth(expectedCurrentHealth);\n\n        // Retrieve the current health using the method\n        int actualCurrentHealth = creature.getCurrentHealth();\n\n        // Validate the retrieved current health\n        assertEquals(expectedCurrentHealth, actualCurrentHealth);\n    }\n\n    @Test\n    void getBonusHealth() {\n        int expectedBonusHealth = 10; // Change to your expected bonus health value\n        Creature creature = new AllyCreature(\"John Creature\", 25, 5, new File(\"/path/to/image.png\"));\n        creature.setBonusHealth(expectedBonusHealth);\n\n        // Retrieve the bonus health using the method\n        int actualBonusHealth = creature.getBonusHealth();\n\n        // Validate the retrieved bonus health\n        assertEquals(expectedBonusHealth, actualBonusHealth);\n    }\n\n    @Test\n    void getInitiative() {\n        int expectedInitiative = 5; // Change to your expected initiative value\n        Creature creature = new AllyCreature(\"John Creature\", 25, expectedInitiative, new File(\"/path/to/image.png\"));\n\n        // Retrieve the initiative using the method\n        int actualInitiative = creature.getInitiative();\n\n        // Validate the retrieved initiative\n        assertEquals(expectedInitiative, actualInitiative);\n    }\n\n    @Test\n    void getCurrentConditions() {\n        Creature creature = new AllyCreature(\"John Creature\", 25, 5, new File(\"/path/to/image.png\"));\n\n        // Add a few conditions to the creature\n        creature.addCondition(\"Frightened\", 3);\n        creature.addCondition(\"Poisoned\", 2);\n\n        // Get the current conditions of the creature\n        List<Condition> currentConditions = creature.getCurrentConditions();\n\n        // Assert that the current conditions match the added conditions\n        assertEquals(2, currentConditions.size());\n        assertTrue(currentConditions.get(0).toString().contains(\"Frightened\"));\n        assertTrue(currentConditions.get(1).toString().contains(\"Poisoned\"));\n    }\n\n    @Test\n    void getAvailableConditions() {\n\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/fxproject/src/test/java/com/creatures/CreatureTest.java b/fxproject/src/test/java/com/creatures/CreatureTest.java
--- a/fxproject/src/test/java/com/creatures/CreatureTest.java	(revision 3eb16f71c88fb802076c628860c9a59432c9dba7)
+++ b/fxproject/src/test/java/com/creatures/CreatureTest.java	(date 1698607225570)
@@ -9,6 +9,7 @@
 import org.mockito.stubbing.OngoingStubbing;
 
 import java.io.File;
+import java.util.Arrays;
 import java.util.List;
 import java.util.stream.Collectors;
 
@@ -266,6 +267,22 @@
 
     @Test
     void getAvailableConditions() {
+        // Instantiate the Creature class
+        Creature creature = new AllyCreature("John Creature", 25, 5, new File("/path/to/image.png"));
+
+        // Define expected available conditions
+        List<String> expectedConditions = Arrays.asList("Poisoned", "Exhausted", "Stunned");
+
+        // Create a mock to simulate the behavior of the Creature class
+        Creature mockedCreature = Mockito.mock(Creature.class);
+
+        // Define the behavior when getAvailableConditions() is called
+        Mockito.when(mockedCreature.getAvailableConditions()).thenReturn(expectedConditions);
 
+        // Retrieve the available conditions from the mock
+        List<String> availableConditions = mockedCreature.getAvailableConditions();
+
+        // Validate that the returned available conditions match the expected ones
+        assertEquals(expectedConditions, availableConditions);
     }
 }
\ No newline at end of file
